% Demonstrate the usage of Gaussian Process Binary Classification (GPBC)
%
clear all 
close all
format compact

seed = 943; randn('seed',seed), rand('seed',seed)

ntr = 100; nte = 1e4;                        % number of training and test points
xtr = 10*sort(rand(ntr,1));                                     % sample dataset
p = @(x) 1./(1+exp(-5*sin(x)));                  % "true" underlying probability
ytr = 2*(p(xtr)>rand(ntr,1))-1;                              % draw labels +1/-1
i = randperm(ntr); nout = 3;                                      % add outliers
ytr(i(1:nout)) = -ytr(i(1:nout)); 
xte = linspace(0,10,1e3)';                    % support, we test our function on
sf = 1; ell = 0.7;                             % setup the GP
hyp0.cov  = log([ell;sf]);                                             
hyp0.mean = [];
Ncg = 50;                                   % number of conjugate gradient steps
sdscale = 0.5;                  % how many sd wide should the error bars become?
col = {'k',[.8,0,0],[0,.5,0],'b',[0,.75,.75],[.7,0,.5]};                % colors
ymu{1} = 2*p(xte)-1; ys2{1} = 0; 
fmu{1} = 0; fs2{1} = 0;
%% Initialise own variables
cov = @covSqExp;                % Covarience kernel
inference = @inferLaplace;      % Inference function
lik = @likLogistic1;            % Likelihood 
piStarMAP = @predMAP;           % MAP prediction
piStarProbit = @predProbit;     % Class prediction as in MacKay
piStarAvg = @cdfLogistic;       % Averaged prediction 
piStarErf = @predErf;           % Class prediction with Error function

%% My implementation
tic
hyp0.lik = [];

% dbstop in inference
% dbstop in predict
% dbstop in optimizeHyp
% dbstop in posteriorMode
% dbstop in brentmin
% dbstop in predErf
% dbstop in predApproxProbit

hyp = optimizeHyp(hyp0, -Ncg, inference, cov, lik, xtr, ytr);   % opt hypers
hyp.cov
alpha = zeros(ntr,1);
% log marginal liklihood and posterior
[post{2},nlZ(2)] = posteriorMode(hyp, alpha, cov,lik,xtr,ytr); % without stored 'alpha'
Pred = {@origFunction,@predMAP,@cdfLogistic,@predApproxProbit,@predErf};
Pred = {@origFunction,@
m=length(Pred);
for n = 2:m
    [ymu{n}, ys2{n},fmu{n},fs2{n}] = predict(hyp, post{2}, cov,lik, Pred{n}, xtr, xte);  % predict
end
toc

%% Plot results
figure, hold on
leg = {};
for n=1:m
  plot(xte,ymu{n},'Color',col{n},'LineWidth',2)
  leg{end+1} = sprintf('%s',func2str(Pred{n}));
end

for i=1:m
  ysd = sdscale*sqrt(ys2{i});
  fill([xte;flipud(xte)],[ymu{i}+ysd;flipud(ymu{i}-ysd)],...
       col{i},'EdgeColor',col{i},'FaceAlpha',0.1,'EdgeAlpha',0.3);
end

% plot(xte,fmu{2},'Color',col{6},'LineWidth',2)
% leg{end+1} = sprintf('fmu (latent)');
% ysd = sdscale*sqrt(fs2{2});
% fill([xte;flipud(xte)],[fmu{i}+ysd;flipud(fmu{i}-ysd)],...
%      col{2},'EdgeColor',col{6},'FaceAlpha',0.1,'EdgeAlpha',0.3);
% ylim([-5 5])

plot(xtr,ytr,'k+'), plot(xtr,ytr,'ko'), legend(leg,'Location','best')



